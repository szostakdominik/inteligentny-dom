/****************************************************************************
**
** Copyright (C) 2012 Denis Shienkov <denis.shienkov@gmail.com>
** Copyright (C) 2012 Laszlo Papp <lpapp@kde.org>
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtSerialPort module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include "mainwindow.h"
#include "ui_mainwindow.h"

#include <QMessageBox>
#include <QLabel>
#include <QtSerialPort/QSerialPort>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow) {

    ui->setupUi(this);


    serial = new QSerialPort(this);
    settings = new SettingsDialog;
    plots = new plotsDialog;
    serial_rx = new serial_rx_t;



    connect(ui->actionConfigure, SIGNAL(triggered()), settings, SLOT(show()));
    connect(ui->actionConnect, SIGNAL(triggered()), this, SLOT(openSerialPort()));
    connect(ui->actionDisconnect, SIGNAL(triggered()), this, SLOT(closeSerialPort()));
    connect(ui->actionClear, SIGNAL(triggered()), ui->console, SLOT(clear()));
    connect(ui->actionPlots, SIGNAL(triggered()), plots, SLOT(show()));
    connect(ui->actionQuit, SIGNAL(triggered()), this, SLOT(close()));



    connect(this, SIGNAL(plots_signal(double, double, double, double)), plots, SLOT(plots_slot(double, double, double, double)));

    connect(serial, static_cast<void (QSerialPort::*)(QSerialPort::SerialPortError)>(&QSerialPort::error), this, &MainWindow::handleError);
    connect(serial, &QSerialPort::readyRead, this, &MainWindow::readData);

    serial_rx->status = idle;



//    ui->doubleSpinBox_motor_torque->setHidden(1);
//    ui->label_motor_torque->setHidden(1);

//    ui->doubleSpinBox_motor_foc_pid_omega_kp->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_omega_ki->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_omega_kd->setHidden(1);

//    ui->doubleSpinBox_motor_foc_pid_d_kp->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_d_ki->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_d_kd->setHidden(1);

//    ui->doubleSpinBox_motor_foc_pid_q_kp->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_q_ki->setHidden(1);
//    ui->doubleSpinBox_motor_foc_pid_q_kd->setHidden(1);

//    ui->label_motor_foc_pid_d->setHidden(1);
//    ui->label_motor_foc_pid_q->setHidden(1);



    ui->plot->addGraph();
    ui->plot->graph(0)->setPen(QPen(Qt::red));
    ui->plot->graph(0)->setName("Phase A");

    ui->plot->addGraph();
    ui->plot->graph(1)->setPen(QPen(Qt::green));
    ui->plot->graph(1)->setName("Phase B");

    ui->plot->addGraph();
    ui->plot->graph(2)->setPen(QPen(Qt::blue));
    ui->plot->graph(2)->setName("Phase C");

    ui->plot->xAxis->setRange(0, 256);
    ui->plot->yAxis->setRange(-100, 100);

    ui->plot->xAxis->setLabel("[samples]");
    ui->plot->yAxis->setLabel("[A]");

    ui->plot->xAxis2->setVisible(true);
    ui->plot->xAxis2->setTickLabels(false);
    ui->plot->yAxis2->setVisible(true);
    ui->plot->yAxis2->setTickLabels(false);

    ui->plot->legend->setVisible(true);
    ui->plot->legend->setFont(QFont("Helvetica",9));

    ui->currentPlot->setInteractions(QCP::iRangeDrag | QCP::iRangeZoom | QCP::iSelectPlottables);

}



MainWindow::~MainWindow() {

    delete settings;
    delete plots;
    delete serial;
    delete serial_rx;
    delete ui;

}



void MainWindow::openSerialPort() {

    SettingsDialog::Settings p = settings->settings();

    serial->setPortName(p.name);
    serial->setBaudRate(p.baudRate);
    serial->setDataBits(p.dataBits);
    serial->setParity(p.parity);
    serial->setStopBits(p.stopBits);
    serial->setFlowControl(p.flowControl);

    if (serial->open(QIODevice::ReadWrite)) {

        ui->actionConfigure->setEnabled(false);
        ui->actionConnect->setEnabled(false);
        ui->actionDisconnect->setEnabled(true);
        ui->actionClear->setEnabled(true);
        ui->actionPlots->setEnabled(true);
        ui->actionQuit->setEnabled(false);

        ui->toolBox->setEnabled(true);

    } else {

        QMessageBox::critical(this, tr("Error."), serial->errorString());

    }

}



void MainWindow::closeSerialPort() {

    if (serial->isOpen())
        serial->close();

    ui->actionConfigure->setEnabled(true);
    ui->actionConnect->setEnabled(true);
    ui->actionDisconnect->setEnabled(false);
    ui->actionClear->setEnabled(true);
    ui->actionPlots->setEnabled(false);
    ui->actionQuit->setEnabled(true);

    ui->toolBox->setEnabled(false);

}



void MainWindow::writeData(const QByteArray &data) {

        serial->write(data);

}



void MainWindow::readData() {

    QByteArray data = serial->readAll();



    for( int i = 0; i < data.size(); i++ ) {



        if( ((uint8_t)data.at(i) == 0x80) ) {

            serial_rx->status = receiving_status;

            serial_rx->frame.clear();
            serial_rx->frame.append(data.at(i));

        }

        else if( serial_rx->status == receiving_status ) {

            serial_rx->status = receiving_data;

            serial_rx->frame.append(data.at(i));

        }

        else if( serial_rx->status == receiving_data ) {

            serial_rx->frame.append(data.at(i));



            if( serial_rx->frame.size() == serial_rx->frame.at(1) ) {

                union {
                    float word;
                    uint8_t bytes[4];
                } phase_a, phase_b, phase_c, speed;

//                uint8_t direction = serial_rx->frame.at(2) | ( (serial_rx->frame.at(19) & (0x80 >> 1U)) << 1U );

                phase_a.bytes[0] = serial_rx->frame.at(3) | ( (serial_rx->frame.at(19) & (0x80 >> 2U)) << 2U );
                phase_a.bytes[1] = serial_rx->frame.at(4) | ( (serial_rx->frame.at(19) & (0x80 >> 3U)) << 3U );
                phase_a.bytes[2] = serial_rx->frame.at(5) | ( (serial_rx->frame.at(19) & (0x80 >> 4U)) << 4U );
                phase_a.bytes[3] = serial_rx->frame.at(6) | ( (serial_rx->frame.at(19) & (0x80 >> 5U)) << 5U );

                phase_b.bytes[0] = serial_rx->frame.at(7) | ( (serial_rx->frame.at(19) & (0x80 >> 6U)) << 6U );
                phase_b.bytes[1] = serial_rx->frame.at(8) | ( (serial_rx->frame.at(19) & (0x80 >> 7U)) << 7U );
                phase_b.bytes[2] = serial_rx->frame.at(9) | ( (serial_rx->frame.at(20) & (0x80 >> 1U)) << 1U );
                phase_b.bytes[3] = serial_rx->frame.at(10) | ( (serial_rx->frame.at(20) & (0x80 >> 2U)) << 2U );

                phase_c.bytes[0] = serial_rx->frame.at(11) | ( (serial_rx->frame.at(20) & (0x80 >> 3U)) << 3U );
                phase_c.bytes[1] = serial_rx->frame.at(12) | ( (serial_rx->frame.at(20) & (0x80 >> 4U)) << 4U );
                phase_c.bytes[2] = serial_rx->frame.at(13) | ( (serial_rx->frame.at(20) & (0x80 >> 5U)) << 5U );
                phase_c.bytes[3] = serial_rx->frame.at(14) | ( (serial_rx->frame.at(20) & (0x80 >> 6U)) << 6U );

                speed.bytes[0] = serial_rx->frame.at(15) | ( (serial_rx->frame.at(20) & (0x80 >> 7U)) << 7U );
                speed.bytes[1] = serial_rx->frame.at(16) | ( (serial_rx->frame.at(21) & (0x80 >> 1U)) << 1U );
                speed.bytes[2] = serial_rx->frame.at(17) | ( (serial_rx->frame.at(21) & (0x80 >> 2U)) << 2U );
                speed.bytes[3] = serial_rx->frame.at(18) | ( (serial_rx->frame.at(21) & (0x80 >> 3U)) << 3U );

                serial_rx->status = idle;

                emit plots_signal( phase_a.word, phase_b.word, phase_c.word, speed.word );

            }

        }



        else if( (data.at(i) == '-') && (!serial_rx->status) ) {

            serial_rx->status = receiving_string;
            serial_rx->frame.clear();

        }

        else if( serial_rx->status == receiving_string ) {

            if( data.at(i) != '\r' )
                serial_rx->frame.append(data.at(i));

            else {

                serial_rx->status = idle;

                ui->console->setTextColor(Qt::blue);
                ui->console->append(serial_rx->frame);

            }

        }




    }

}



void MainWindow::handleError(QSerialPort::SerialPortError error) {

    if (error == QSerialPort::ResourceError) {
        QMessageBox::critical(this, tr("Critical Error."), serial->errorString());
        closeSerialPort();
    }

}






void MainWindow::on_spinBox_motor_frequency_switching_editingFinished() {

    writeData( "-motor_frequecy_switching=" );
    writeData( ui->spinBox_motor_frequency_switching->text().toUtf8() );
    writeData( "\r" );

    ui->console->setTextColor(Qt::red);
    ui->console->append( "motor_frequecy_switching=" + ui->spinBox_motor_frequency_switching->text().toUtf8() );

}



void MainWindow::on_spinBox_motor_frequency_current_sample_editingFinished() {

    writeData( "-motor_frequency_current_sample=" );
    writeData( ui->spinBox_motor_frequency_current_sample->text().toUtf8() );
    writeData( "\r" );

    ui->console->setTextColor(Qt::red);
    ui->console->append( "-motor_frequency_current_sample=" + ui->spinBox_motor_frequency_current_sample->text().toUtf8() );

}



void MainWindow::on_radioButton_motor_method_trap_toggled(bool checked) {

    if(checked) {

      writeData("-motor_method=0\r");

      ui->console->setTextColor(Qt::red);
      ui->console->append("motor_method=0");



      ui->doubleSpinBox_motor_trap_pid_omega_kp->setHidden(0);
      ui->doubleSpinBox_motor_trap_pid_omega_ki->setHidden(0);
      ui->doubleSpinBox_motor_trap_pid_omega_kd->setHidden(0);

      ui->doubleSpinBox_motor_trap_pid_omega_kp->setEnabled(1);
      ui->doubleSpinBox_motor_trap_pid_omega_ki->setEnabled(1);
      ui->doubleSpinBox_motor_trap_pid_omega_kd->setEnabled(1);

      ui->doubleSpinBox_motor_trap_pid_current_kp->setHidden(0);
      ui->doubleSpinBox_motor_trap_pid_current_ki->setHidden(0);
      ui->doubleSpinBox_motor_trap_pid_current_kd->setHidden(0);

      ui->doubleSpinBox_motor_trap_pid_current_kp->setEnabled(1);
      ui->doubleSpinBox_motor_trap_pid_current_ki->setEnabled(1);
      ui->doubleSpinBox_motor_trap_pid_current_kd->setEnabled(1);

      ui->doubleSpinBox_motor_torque->setEnabled(0);
      ui->doubleSpinBox_motor_torque->setHidden(1);
      ui->label_motor_torque->setHidden(1);

      ui->doubleSpinBox_motor_foc_pid_omega_kp->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_omega_ki->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_omega_kd->setEnabled(0);

      ui->doubleSpinBox_motor_foc_pid_omega_kp->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_omega_ki->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_omega_kd->setHidden(1);

      ui->doubleSpinBox_motor_foc_pid_d_kp->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_d_ki->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_d_kd->setEnabled(0);

      ui->doubleSpinBox_motor_foc_pid_d_kp->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_d_ki->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_d_kd->setHidden(1);

      ui->doubleSpinBox_motor_foc_pid_q_kp->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_q_ki->setEnabled(0);
      ui->doubleSpinBox_motor_foc_pid_q_kd->setEnabled(0);

      ui->doubleSpinBox_motor_foc_pid_q_kp->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_q_ki->setHidden(1);
      ui->doubleSpinBox_motor_foc_pid_q_kd->setHidden(1);

//      ui->label_motor_foc_pid_d->setHidden(1);
//      ui->label_motor_foc_pid_q->setHidden(1);

    }

}

void MainWindow::on_radioButton_motor_method_foc_toggled(bool checked) {

    if(checked) {

      writeData("-motor_method=1\r");

      ui->console->setTextColor(Qt::red);
      ui->console->append("motor_method=1");



      ui->label_motor_torque->setHidden(0);
      ui->doubleSpinBox_motor_torque->setHidden(0);
      ui->doubleSpinBox_motor_torque->setEnabled(1);

      ui->doubleSpinBox_motor_foc_pid_omega_kp->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_omega_ki->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_omega_kd->setHidden(0);

      ui->doubleSpinBox_motor_foc_pid_omega_kp->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_omega_ki->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_omega_kd->setEnabled(1);

      ui->doubleSpinBox_motor_foc_pid_d_kp->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_d_ki->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_d_kd->setHidden(0);

      ui->doubleSpinBox_motor_foc_pid_d_kp->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_d_ki->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_d_kd->setEnabled(1);

      ui->doubleSpinBox_motor_foc_pid_q_kp->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_q_ki->setHidden(0);
      ui->doubleSpinBox_motor_foc_pid_q_kd->setHidden(0);

      ui->doubleSpinBox_motor_foc_pid_q_kp->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_q_ki->setEnabled(1);
      ui->doubleSpinBox_motor_foc_pid_q_kd->setEnabled(1);

//      ui->label_motor_foc_pid_d->setHidden(0);
//      ui->label_motor_foc_pid_q->setHidden(0);

      ui->doubleSpinBox_motor_trap_pid_omega_kp->setEnabled(0);
      ui->doubleSpinBox_motor_trap_pid_omega_ki->setEnabled(0);
      ui->doubleSpinBox_motor_trap_pid_omega_kd->setEnabled(0);

      ui->doubleSpinBox_motor_trap_pid_omega_kp->setHidden(1);
      ui->doubleSpinBox_motor_trap_pid_omega_ki->setHidden(1);
      ui->doubleSpinBox_motor_trap_pid_omega_kd->setHidden(1);

      ui->doubleSpinBox_motor_trap_pid_current_kp->setEnabled(0);
      ui->doubleSpinBox_motor_trap_pid_current_ki->setEnabled(0);
      ui->doubleSpinBox_motor_trap_pid_current_kd->setEnabled(0);

      ui->doubleSpinBox_motor_trap_pid_current_kp->setHidden(1);
      ui->doubleSpinBox_motor_trap_pid_current_ki->setHidden(1);
      ui->doubleSpinBox_motor_trap_pid_current_kd->setHidden(1);

    }

}



void MainWindow::on_radioButton_motor_direction_cw_toggled(bool checked) {

    if(checked) {

      writeData("-motor_direction=0\r");

      ui->console->setTextColor(Qt::red);
      ui->console->append("motor_direction=0");

    }

}



void MainWindow::on_radioButton_motor_direction_ccw_toggled(bool checked) {

    if(checked) {

      writeData("-motor_direction=1\r");

      ui->console->setTextColor(Qt::red);
      ui->console->append("motor_direction=1");

    }

}



//void MainWindow::on_doubleSpinBox_motor_omega_editingFinished() {

//    writeData( "-motor_omega=" );
//    writeData( ui->doubleSpinBox_motor_omega->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_omega=" + ui->doubleSpinBox_motor_omega->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_torque_editingFinished() {

//    writeData( "-motor_torque=" );
//    writeData( ui->doubleSpinBox_motor_torque->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_torque=" + ui->doubleSpinBox_motor_torque->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_speed_pid_kp_editingFinished() {

////    writeData( "-motor_speed_pid_kp=" );
////    writeData( ui->doubleSpinBox_motor_speed_pid_kp->text().toUtf8() );
////    writeData( "\r" );

////    ui->console->setTextColor(Qt::red);
////    ui->console->append( "motor_speed_pid_kp=" + ui->doubleSpinBox_motor_speed_pid_kp->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_trap_pid_omega_ki_editingFinished() {

//    writeData( "-motor_trap_pid_omega_ki=" );
//    writeData( ui->doubleSpinBox_motor_trap_pid_omega_ki->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_trap_pid_omega_kd=" + ui->doubleSpinBox_motor_trap_pid_omega_ki->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_trap_pid_omega_kd_editingFinished() {

//    writeData( "-motor_trap_pid_omega_kd=" );
//    writeData( ui->doubleSpinBox_motor_trap_pid_omega_kd->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_trap_pid_omega_kd=" + ui->doubleSpinBox_motor_trap_pid_omega_kd->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_trap_pid_current_kp_editingFinished() {

//    writeData( "-motor_trap_pid_current_kp=" );
//    writeData( ui->doubleSpinBox_motor_trap_pid_current_kp->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_trap_pid_current_kp=" + ui->doubleSpinBox_motor_trap_pid_current_kp->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_trap_pid_current_ki_editingFinished() {

//    writeData( "-motor_trap_pid_current_ki=" );
//    writeData( ui->doubleSpinBox_motor_trap_pid_current_ki->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_trap_pid_current_ki=" + ui->doubleSpinBox_motor_trap_pid_current_ki->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_trap_pid_current_kd_editingFinished() {

//    writeData( "-motor_trap_pid_current_kd=" );
//    writeData( ui->doubleSpinBox_motor_trap_pid_current_kd->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_trap_pid_current_kd=" + ui->doubleSpinBox_motor_trap_pid_current_kd->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_d_kp_editingFinished() {

//    writeData( "-motor_foc_pid_d_kp=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_d_kp->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_foc_pid_d_kp=" + ui->doubleSpinBox_motor_foc_pid_d_kp->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_d_ki_editingFinished() {

//    writeData( "-motor_foc_pid_d_ki=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_d_ki->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_foc_pid_d_ki=" + ui->doubleSpinBox_motor_foc_pid_d_ki->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_d_kd_editingFinished() {

//    writeData( "-motor_foc_pid_d_kd=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_d_kd->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_foc_pid_d_kd=" + ui->doubleSpinBox_motor_foc_pid_d_kd->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_q_kp_editingFinished() {

//    writeData( "-motor_foc_pid_q_kp=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_q_kp->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_foc_pid_q_kp=" + ui->doubleSpinBox_motor_foc_pid_q_kp->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_q_ki_editingFinished() {

//    writeData( "-motor_torque_pid_iq_ki=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_q_ki->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_torque_pid_iq_ki=" + ui->doubleSpinBox_motor_foc_pid_q_ki->text().toUtf8() );

//}



//void MainWindow::on_doubleSpinBox_motor_foc_pid_q_kd_editingFinished() {

//    writeData( "-motor_foc_pid_q_kd=" );
//    writeData( ui->doubleSpinBox_motor_foc_pid_q_kd->text().toUtf8() );
//    writeData( "\r" );

//    ui->console->setTextColor(Qt::red);
//    ui->console->append( "motor_foc_pid_q_kd=" + ui->doubleSpinBox_motor_foc_pid_q_kd->text().toUtf8() );

//}



//void MainWindow::on_pushButton_motor_disable_clicked() {

//    writeData("-motor_enable=0\r");

//    ui->console->setTextColor(Qt::red);
//    ui->console->append("motor_enable=0");

////    ui->spinBox_motor_frequency_switching->setEnabled(1);
////    ui->spinBox_motor_frequency_adc->setEnabled(1);

////    ui->radioButton_motor_ctrl_mthd_foc->setEnabled(1);
////    ui->radioButton_motor_ctrl_mthd_trap->setEnabled(1);

////    ui->doubleSpinBox_motor_speed_pid_kp->setEnabled(1);
////    ui->doubleSpinBox_motor_speed_pid_ki->setEnabled(1);
////    ui->doubleSpinBox_motor_speed_pid_kd->setEnabled(1);

////    if( ui->radioButton_motor_ctrl_mthd_trap->isChecked() ) {
////        ui->doubleSpinBox_motor_torque_pid_trap_kp->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_trap_ki->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_trap_kd->setEnabled(1);
////    }

////    else if( ui->radioButton_motor_ctrl_mthd_foc->isChecked() ) {
////        ui->doubleSpinBox_motor_torque_pid_id_kp->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_id_ki->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_id_kd->setEnabled(1);

////        ui->doubleSpinBox_motor_torque_pid_iq_kp->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_iq_ki->setEnabled(1);
////        ui->doubleSpinBox_motor_torque_pid_iq_kd->setEnabled(1);
////    }

//    ui->pushButton_motor_disable->setEnabled(0);
//    ui->pushButton_motor_enable->setEnabled(1);

//}



//void MainWindow::on_pushButton_motor_enable_clicked() {

//    if( (ui->spinBox_motor_frequency_switching->value() != 0) &&
//        (ui->spinBox_motor_frequency_adc->value() != 0) //&&
////        ( (!ui->checkBox_motor_speed_pid_enable->isChecked()) || (ui->checkBox_motor_speed_pid_enable->isChecked() && ( (ui->doubleSpinBox_motor_speed_pid_kp->value() != 0) || (ui->doubleSpinBox_motor_speed_pid_ki->value() != 0) || (ui->doubleSpinBox_motor_speed_pid_kd->value() != 0) ) ) )


//            ) {

//        writeData("-motor_enable=1\r");

//        ui->console->setTextColor(Qt::red);
//        ui->console->append("motor_enable=1");

////        ui->spinBox_motor_frequency_switching->setEnabled(0);
////        ui->spinBox_motor_frequency_adc->setEnabled(0);

////        ui->radioButton_motor_ctrl_mthd_foc->setEnabled(0);
////        ui->radioButton_motor_ctrl_mthd_trap->setEnabled(0);

//////        ui->checkBox_motor_speed_pid_enable->setEnabled(0);
////        ui->doubleSpinBox_motor_speed_pid_kp->setEnabled(0);
////        ui->doubleSpinBox_motor_speed_pid_ki->setEnabled(0);
////        ui->doubleSpinBox_motor_speed_pid_kd->setEnabled(0);

////        ui->doubleSpinBox_motor_torque_pid_trap_kp->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_trap_ki->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_trap_kd->setEnabled(0);

////        ui->doubleSpinBox_motor_torque_pid_id_kp->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_id_ki->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_id_kd->setEnabled(0);

////        ui->doubleSpinBox_motor_torque_pid_iq_kp->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_iq_ki->setEnabled(0);
////        ui->doubleSpinBox_motor_torque_pid_iq_kd->setEnabled(0);

//        ui->pushButton_motor_disable->setEnabled(1);
//        ui->pushButton_motor_enable->setEnabled(0);

//    }
//    else {

//        ui->console->setTextColor(Qt::red);
//        ui->console->append("motor_enable=0");

//    }

//}
